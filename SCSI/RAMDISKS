* HRDSCSIS v1.2          17-Mar-2021
* Raw sector read/write for Horizon SCSI access
* This code lives in SCSI bank; pages >BA in at >6000-7FFF
*
* BLWP @RAMDSK
*      r0: 0=write, >FFxx=read
*      r3: sector number to read/write
*      r3: local DSR buffer address
*     r12: caller cru
*--
*     r10: mapper save
*
* RETURN:  R0msb error code (don't like how lsb is not cleared first)
*----------------------------------
* 3.17.2018 Re-integrated into v7.00
* 3.18.2018 SCSMAP integration. Unit8=1401; Unit9=1601
*           Disabled VIB tests here; only perform in SECTOR_S!
*          -Add a routine to test >4000 header flags? (needed!)
* 3.20.2018 Changed READ code to 16-bit mov
*          -need to change offset for starting RAMHD SECTOR 0 in FORM/here
*          -slow ws; might be better on pad/fast page
;
; 1.18.2021 Adjusted read/write for 4xMOV during buffer copy for performance
;           MUST check header in 8k ROS for starting sector
;           Currently hardcoded to >0600
;
; 3.17.2021 Implemented >9901 flag/header usage
;           Error if header not found or ramHD partition size=0
;           Updated sector IO to unsigned comparisons
;           MUST USE GENCFG TO UTILIZE ramHD partitions going forward
;           Added code to test max size/carry bit; DISABLED for now
;
;4.12.2024  Added debug to help debug inability to DELETE file when SCSI
;           card is not present.
;
* test code
*      LWPI >F000
*      LIMI 0
*      LI   R0,>FF00
*      LI   R3,0
*      LI   R8,BUFFER
*      LI   R12,>1401
*      BLWP @RAMDSK
*
*      MOV  R0,R0
*      JNE  ERROR
*      LI   R0,>27
*      LI   R1,BUFFER
*      LI   R2,10
*      XOP  @SIX,0
*ERROR  BLWP @0
*BUFFER BSS 256
*SIX    DATA 6
*------end test code --------------


*HBA    DATA >BABA
RAMWS  BSS  >20
MAP96  EQU  >F110
TOTAUS EQU  >A           offset into VIB
H0001  DATA >0001
UNIT8  DATA 8

H9901  DATA >9901        flag for new partition
FLAG7  EQU  >6010        RAMDISK headers; base 0x6000
F#PART EQU  >6012
H#PART EQU  >6014
H#SIZE EQU  >6016

RAMERR B    @HUDFSE      jump too far ;(


RAMDSK DATA RAMWS,$+2
       MOVB @MAP96+3,R10      Save mapper
       MOVB @HBA,@MAP96+3     map external bus to 0x6000-0x7fff

       MOV  @0(R13),R0        read/write
       MOV  @6(R13),R3        sector#, logical

       IF DEBUGSCSI#     ;display the sector in debug
          BLWP @XMNUM
          DATA RAMWS+6,1      ;R3; 1 word
       FI

       MOV  @16(R13),R8       task buffer location to read/write
       MOV  @24(R13),R12      CRU from caller

       LI   R12,>1401    HARD CODE for now   (change in sector_s also)
       C    @UNITNO,@UNIT8     unit8?
       JEQ  IS1401            yes. 1401
       LI   R12,>1601         No, other ramdisk
;
; Verify partition
;
IS1401 SBO  0                 turn the card on

       C    @FLAG7,@H9901     special flag set?
       JNE  RAMERR            not valid, report error

       MOV  @H#PART,R1        partition start sector (must be >0)
       JEQ  RAMERR            0, error

       A    R1,R3             add partition size to requested sector

       MOV  @H#SIZE,R7        get total aus  [don't know sec 0 here!]
       A    R1,R7             and add offset
;      JOC  RAMERR       3.17, test this later (part+size cannot >65535)
;      C    R3,R7        3.17, in theory, R3 should never exceed R7
;      JH   RAMERR             unless we muck up the format

;
; RAMdisk rack manipulation begins
;      reminder: 8/16 bit refers to the addressible space on the card
;
       LI   R2,>B900
       LDCR R2,8              load low 8 page bits
       SWPB R2
       COC  @H0001,R12        check if 16-bit horizons access
;;     JNE  HORS02
       JNE  HORS10       3.17.2021, skip
       LDCR R2,0              load all page bits
*
;------------------------------
; we don't really care about the parms, sector 0, etc
;  now, we MIGHT want a "first accessed" flag somewhere
;  to prevent failure to read sector 0 first,although for now that is in
;  the SCSI SECTOR_S code..

HORS10 COC    @H0001,R12  test cru  ADDED 01/01/93 J.G.SCHROEDER
       JEQ    HORX                  FIXED BUG SO A 16 BIT RAMDISK ABOVE 256K

*below for 8-bit only; should never encounter.
       CI     R7,>0401              WILL ERROR OUT WHEN USED AS CRU >xx00
       JHE    HUDFSE     (8 bit cannot exceed 1023 sectors!)

HORX   DEC    R7
       MOV    R7,@JGS    save total AUs

* here is where sector number is determined for below routine
       MOV    R3,R7      and REPLACE R7 with the desired sector # (R3)
       CI     R3,1023
;;     JGT    LINE0
       JH   LINE0        3.17
       INC    R7
LINE0  MOV    R7,R2
       ANDI   R2,>FFF8
       S      R2,R7
       SLA    R7,8
       AI     R7,>7800   *9800
       SRL    R2,2
       AI     R2,7
       CI     R3,1023
       JEQ    OK0
       CI     R3,1023
;;     JGT    OK1
       JH   OK1          3.17

       CI     R3,>0000   test earlier saved totaus
JGS    EQU    $-2        3.17, potentially eliminate this test and above
       JEQ    OK0              code to set the value; not seeing a use

       CI     R2,3*2+7
;;     JGT    LINE1
       JH   LINE1        3.17
       AI     R2,89*2
       JMP    OK

LINE1  CI     R2,92*2+7
;;     JLT    LINE2      3.17
       JL   LINE2
       INCT   R2
       ANDI   R2,>00FF      MASK FOR 16 BIT ERROR
       JMP    OK

LINE2  AI     R2,>FFFA
       JMP    OK
OK0    LI     R2,>00B9
       LI     R7,>7800   9800
OK
       COC    @H0001,R12
       JEQ    OK2
       SWPB   R2
       LDCR   R2,8              load low 8 page bits
       JMP    HORS25
OK1    AI     R2,>FFFA
OK2    LDCR   R2,0

*
* READ OR WRITE--------->
*      R0: 0=write; 1=read
*      R1: buffer address from earlier, moved to R8
*      R5: destroyed
*      R7: points to ramdisk memory
*      R8: mdos buffer
*     R10: saved mapper address, restored @ HORS90
*
* 3.20.18   Read w/MOV versus MOVB
* 1.18.2021 Change read/write to 4x MOV for speed improvement
*
HORS25 LI   R5,32     ;256    # of bytes to move
       CLR  R9           clear ERROR condition, no possible failure now
       MOV  R0,R0             read or write?
       JEQ  HRDWRT            0= write, 1= read

;;HRDRED  MOVB *R7+,*R8+ ;1.18.2021, faster
HRDRED MOV  *R7+,*R8+         read a horizons sector
       MOV  *R7+,*R8+
       MOV  *R7+,*R8+    1.18.2021, added 3 more moves for speed
       MOV  *R7+,*R8+
       DEC  R5
       JNE  HRDRED

       IF DEBUGSCSI#
         BLWP @XMTEXT
         DATA HRDREAD
       FI

       JMP  SECT90  (exit)
*
;;HRDWRT MOVB *R8+,*R7+  ;1.18.2021, faster
HRDWRT MOV  *R8+,*R7+         write a horizon sector
       MOV  *R8+,*R7+
       MOV  *R8+,*R7+
       MOV  *R8+,*R7+
       DEC  R5
       JNE  HRDWRT

       IF DEBUGSCSI#
         BLWP @XMTEXT
         DATA HRDWRITE
       FI
*
* RETURN TO CALLER:
*      Caller R0msb = status
*
SECT90 SBZ  0                 turn card off
       MOVB R9,*R13           send error status to caller
       MOVB R10,@MAP96+3      restore mapper
       RTWP

HUDFSE LI   R9,>C000          return error
       JMP  SECT90

HRDREAD  TEXT ' (read)'
         BYTE 0

HRDWRITE TEXT ' (write)'
         BYTE 0
         DATA 0
*eof
