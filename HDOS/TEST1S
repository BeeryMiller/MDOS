*
* memory usage:
*
* execution:
*
*      0 program code
*      1 source window
*      2 destination window
*      7 debugger
*
* virtual:
*
*      0    program code
*      1-x  system/sys image
*
       LWPI >F000
*
* get filename from command line
*
       LI   R1,CMDARG
       MOVB @MAXLEN,@-1(R1)
*
*      convert command args into string
*
*      IN:  R1 points to string buffer (byte after length byte)
*           length byte must have max length of buffer
*
CMDSTR MOV  @>0128,R2         get pointer to command string
       JEQ  NO#STR            zero length string
       CB   @2(R2),@-1(R1)    compare lengths of strings
       JL   LENOK             string too long for the buffer
       MOVB @-1(R1),@2(R2)    just fill the buffer anyway
*
LENOK  MOV  R1,R5             cursor to caller's string buffer
       DEC  R5
       MOVB @2(R2),R6         count of chars to move
       SRL  R6,8
       INCT R6
*
NXTNOD MOV  R2,R3             cursor within node
       INCT R3
       MOV  R2,R4
       AI   R4,8              pointer to end of node
*
NODL1  MOVB *R3+,*R5+
       DEC  R6
       JEQ  NODJ1
       C    R3,R4
       JL   NODL1
       MOV  *R2,R2            this link never zero if valid string
       JMP  NXTNOD
*
NODJ1  CLR  R0
       JMP  NODRET
*
NO#STR CLR  R0
       MOVB R0,@-1(R1)
       MOVB R0,*R1
       JMP  NODRET
*
*
NODRET MOVB @-1(R1),R0
       JNE  PARSEN
       BLWP @0
*
PARSEN LI   R0,8
       LI   R2,CMDLEN
       MOVB @MAXLEN,*R2
       CLR  R3
       XOP  @NINE,0           parse a potential filename
       JEQ  PARSEO            parse error, use keyboard input
       BLWP @0
*
PARSEO LI   R0,CMDPAB
       XOP  @EIGHT,0
       MOVB @CMDPAB+2,R1
       JEQ  GOTPAR
       BLWP @0
*
* got the parms, now to allocate memory for the image
*
GOTPAR LI   R0,1
       MOV  @CMDARG+4,R1      sector count for file
       AI   R1,31             -pc: round up 11/06/90
       SRL  R1,5              convert to page count
       LI   R2,1
       CLR  R3
       XOP  @SEVEN,0
       MOV  R0,R0
       JEQ  READIT
       BLWP @0
*
READIT MOV  @CMDARG+4,@CMDPAB+12
       LI   R2,>2000
       MOV  R2,@CMDPAB+4
       LI   R0,CMDPAB
       XOP  @EIGHT,0
       MOVB @CMDPAB+2,R1
       JEQ  MOVEIT
       BLWP @0
*
MOVEIT LI   R0,4
       LI   R1,PAGLST
       LI   R2,PAGLEN
       XOP  @SEVEN,0
*
       LIMI 0
       CLR  R1
       MOV  @CMDARG+4,R0
       AI   R0,31             -pc: round up 11/6/90
       SRL  R0,5
       INC  R0
*
MOVE00 SLA  R1,8
       MOVB R1,@>F112
       SRL  R1,8
       INC  R1
       MOVB @PAGLST(R1),@>F111
*
       LI   R2,>2000
       LI   R3,>4000
       LI   R4,>2000
*
MOVE10 MOV  *R2+,*R3+
       DECT R4
       JNE  MOVE10
*
       C    R1,R0
       JLE  MOVE00
*
*      DATA >2C40
       LI   R0,LCODE
       MOV  R0,@>F04E
       MOV  @OP1,R0
       MOV  @OP2,R1
       MOV  @OP3,R2
       MOV  @OP4,R3
       B    R0
*
OP1    CLR  @>F110
OP2    EQU  OP1+2
OP3    BLWP @0
OP4    EQU  OP3+2
*
H00    BYTE >00
H01    BYTE >01
H02    BYTE >02
H0A    BYTE >0A
H20    BYTE >20
COMMA  BYTE ','
MAXLEN BYTE 40
*
FIVE   DATA 5
SIX    DATA 6
SEVEN  DATA 7
EIGHT  DATA 8
NINE   DATA 9
*
PAGLST BYTE 0                 program page
       BSS  64                allow for 256k image
PAGLEN EQU  $-PAGLST
*
       DATA 0
CMDARG BSS  80
*
CMDPAB DATA >0A00,>0000,CMDARG               BREAD parms
       DATA >0000,>0000,>0000
       DATA >0000
       BYTE 0
CMDLEN BSS  41
*
