RESTOR
CLOSE
       CI   R2,WBUFEN         IS FILE ALREADY OPEN?
       JNE  CLRE1             FILE IS OPEN
       B    @CLRE2            BRANCH TO SEE IF FROM FLOPPY OR WINCHESTER
*
CLERR  SOCB R0,@PABERR        CLOSE IN THE EVENT OF ERROR CONDITION
*
* NOW SEE IF DATA BUFFER NEEDS TO BE STORED
CLRE1  COC  @H0004,R6
       JNE  CL1          BRANCH IF NOT INPUT
       CZC  @H0002,R6
       JEQ  CLV1         BRANCH IF     INPUT
* NOT INPUT SO TRY TO WRITE OUT DATA BUFFER
CL1    BL   @WRTDAT
       SOCB R0,@PABERR
*
* IF ERROR, CONTINUE ANYHOW
* NOW CLOSE UP RECORDS
* IF FIXED, MAKE SURE TOP RECORD HAS LARGEST RECORD WRITTEN
* IF VARIABLE THEN LEV3RC, EOFOST MUST GO TO ALL FCBS
* TEST IF FIXED OR VARIABLE
       MOV  @PTRPRE(R9),R1    AT TOP ALREADY
       JEQ  CLRE5
       BL   @WRTFCB      WRITE FCB
       SOCB R0,@PABERR        SET ERROR JUST IN CASE
       BL   @TOPFCB
       SOCB R0,@PABERR        SET ERROR JUST IN CASE
CLRE5  MOV  @FNVNAU(R3),R0          NUMBER OF AU'S USED
       SWPB R0                    OR HIGHEST RECORD IF FIXED
       MOV  R0,@LEV3RC(R9)
       COC  @H0010,R6
       JNE  CLFIX             BRANCH IF FIXED
* VARIABLE LENGTH RECORDS, SO PUT END IN ONLY FIRST FCB
       MOVB @FNVROF(R3),@EOFOST(R9) STORE BYTE WITHIN SECTOR OFFSET
       SZCB @CBH0F,@NIBLES(R9)
       SOCB @FNVSOF(R3),@NIBLES(R9) STORE SECTOR WITHIN AU OFFSET
CLFIX  MOV  @HSALML(R3),@LEV2RC(R9) HIGHEST SECTOR ALLOCATED
       MOVB @HSALMS(R3),R1         TEST IF FILE ALLTERED
       JLT  CLRE3                  YES, IT WAS
       JMP  CLRE4
*
CLRE3  SOCB @CBH10,@FSTATF(R9)
CLRE4  ANDI R1,>0F00
       SLA  R1,4              yalfu
       SZCB @CBHF0,@NIBLES(R9)
       SOCB R1,@NIBLES(R9)    yalfu
*CLRE8  MOV  @TIMCM2,@DATLUF(R9)
*      MOV  @TIMCM1,@DATLUF+2(R9)

CLRE8  MOV  @LSTUP2(R3),@DATLUF(R9)  UPDATE LAST UPDATE TIME
       MOV  @LSTUP1(R3),@DATLUF+2(R9)


       BL   @WRTFCB
       SOCB R0,@PABERR           JUST IN CASE OF ERROR
* IF ERROR, JUST CONTINUE
CLV1
* NOW SAY DATA BUFFER NOT THERE ANYMORE
       CLR  @FNLOCD(R3)
*************$$$$$$$$$$$$$ MAY WANT TO ZERO OUT SECTORS IN AU $$$$$$$$**********
* TEST IF RESTORE
       MOVB @PABERR,R0    WAS THERE AN ERROR?, IF SO DON'T RESTORE
       JNE  ERCLSS            YES, SO STOP HERE
       CB   @CBH04,R6
       JNE  ERCLSS       BRANCH IF NOT RESTORE
* NOW TEST IF VARIABLE LENGTH RECORDS
       COC  @H0010,R6
       JNE  REFIX        BRANCH IF FIXED
       CLR  @FNLOF2(R3)  ELSE ZERO OUT READ / WRITE POINTERS
       MOVB @CBH00,@FNLOFM(R3)
*      CLR  @FNSEC0      0 TO REC OFFSET, AND FCB AND DATA NIBLES
       CLR  @FNSEC0(R3)       yalfu
RES2   B    @FINISH      DON'T HAVE TO DO ANYTHING FOR FIXED LENGTH
*
REFIX  COC  @H0001,R6
       JEQ  RES2         NOTHING IF RELATIVE RECORD
REFIXS CLR  @RECNUM      ZERO OUT RECORD POINTER IF FIXED WITH SEQUENTIAL
       JMP  RES2
*
ERCLSS B    @SYSRTN      FINISHED WITH CLOSE
*
ST1    B    @ISNOPN
*
STATUS
* FIRST FIND IF FILE IS OPEN
       CI   R2,WBUFEN    DONE ON PREVIOUS PAGE
       JEQ  ST1          BRANCH IF NOT OPEN
* NOW THE ONLY THING TO DETERMINE IS IF AT END OF FILE AND DISK
* FIRST SEE IF AT END OF FILE OPCODE/FLAGS IN R6
       MOV  *R3,R1
       CLR  R10          USE R10 FOR FLAGS
       COC  @H0010,R6    TEST IF VARIABLE
       JNE  STFIX        JUMP IF FIXED
* VARIABLE SO COMPARE
       C    @FNLOF2(R3),@FNVNAU(R3) COMPARE AU
       JNE  ST4
       CB   @FNLROF(R3),@FNVROF(R3) COMPARE BYTE
       JNE  ST4
       CB   @FNLOFM(R3),@FNVSOF(R3)  MATCHING SECTOR
       JNE  ST4             NO
* AT END OF FILE SO TEST IF AT END OF DISK
* GET NO. OF AU'S TO GO THROUGH
ST6    MOV  @VOLUME,R5   USES R7,R2,R2
       SLA  R5,3
       MOV  @CYLPLT-8(R5),R2   NUMBER OF AU' IN R2
* NO OF AU'S IN R2
       SRL  R2,4              # OF WORDS TO LOOK THROUGH
* NOW STORE DATA BUFFER
       BL   @SETAXB           SET AUX DATA BUFFER, POINTER IN R1
       LI   R5,1
ST3    MOV  R5,@AUNUM    SET UP PTRS FOR READING VIB'S
       BLWP @RSECDR
       JNE  ST8          BRANCH IF NO ERROR
ST10   SOCB R0,@PABERR
       B    @CLRE1
*
* TO BE HERE AT END OF DISK
ST7    SLA  R10,1        CAREFUL HERE, MUST MAKE SURE R10 = >0200
ST4    CLR  R7
       MOVB @FSTATF(R9),R7
       MOV  R7,R11
       SLA  R7,3
       SRL  R11,5
       SOCB R11,R7
       ANDI R7,>5C00
       SOCB R7,R10
       MOVB R10,@SCNOFF        STORE IN PAB BUF
       JMP  RES2
*
ST8    MOV  R1,R7
       LI   R0,128
       LI   R10,>0100    END OF FILE BUT NOT DISK
ST2    INC  *R7+
       JNE  ST4
       DEC  R2
       JEQ  ST7
       DEC  R0
       JNE  ST2
       INC  R5
       JMP  ST3
*
STFIX  C    @RECNUM,@FNVNAU(R3)
       JEQ  ST6          JUMP IF AT END
       JMP  ST4          OTHERWISE NOT AT END
